function init(self)
	msg.post(".", "acquire_input_focus")
	self.model = msg.url("#spinemodel")
	self.tr = 0
	spine.physics_translate(self.model, vmath.vector3(10, 12, 0))
	self.last_pos = vmath.vector3()
	self.translate = vmath.vector3()
	self.rotation_center = vmath.vector3(0, 0, 0)
	self.rotation_angle = 0
end

local size = {x = 50, y = 25}
local cloud_y = 160
local phys_s = 3
local rotation_speed = 5

local function is_aa_bb(pos, action)
	local min_x = pos.x - size.x
	local max_x = pos.x + size.x
	local min_y = pos.y - size.y + cloud_y
	local max_y = pos.y + size.y + cloud_y

	return action.x >= min_x and action.x <= max_x and
	action.y >= min_y and action.y <= max_y
end

function on_input(self, action_id, action)
	if action_id == hash("mouse_button_left") and is_aa_bb(go.get_position(self.model), action) then
		if action.pressed then
			self.drag = true
			self.last_pos.x = action.x
			self.last_pos.y = action.y
		elseif action.released then
			self.drag = false
		end
	end
	if self.drag then
		local pos = go.get_position(self.model)
		local dx = action.x - self.last_pos.x
		local dy = action.y - self.last_pos.y
		pos.x = pos.x + dx
		pos.y = pos.y + dy
		self.translate.x = dx * phys_s
		self.translate.y = dy * phys_s
		go.set_position(pos, self.model)
		spine.physics_translate(self.model, self.translate)
		self.last_pos.x = action.x
		self.last_pos.y = action.y

		-- Calculate rotation angle based on mouse movement
		local angle_change = -dx * rotation_speed
		self.rotation_angle = self.rotation_angle + angle_change

		-- Apply rotation around the model's current position
		spine.physics_rotate(self.model, pos, angle_change)
	end
end
